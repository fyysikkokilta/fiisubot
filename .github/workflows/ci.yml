name: CI/CD Pipeline

on:
  push:
    branches: [main, master]
  pull_request:
    branches:
      - "*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fyysikkokilta/fiisubot

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Github doesn't support cloning private submodules, so do it via SSH
      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.READ_ONLY_DEPLOY_KEY }}

      # Clone submodules
      - name: Clone submodules
        run: git submodule update --init --recursive --remote

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: |
          poetry install --with dev
          poetry run pip install pylint black

      - name: Check code formatting with Black
        run: poetry run black --check --diff .

      - name: Run pylint
        run: |
          poetry run pylint fiisubot.py extract_songs.py --disable=C0114,C0115,C0116
        continue-on-error: true

  test:
    needs: [linting]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Github doesn't support cloning private submodules, so do it via SSH
      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.READ_ONLY_DEPLOY_KEY }}

      # Clone submodules
      - name: Clone submodules
        run: git submodule update --init --recursive --remote

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install

      - name: Extract songs for testing
        run: poetry run python extract_songs.py

      - name: Test bot imports
        run: |
          poetry run python -c "
          from fiisubot import SongDatabase
          db = SongDatabase()
          print(f'✓ Bot imports successfully, loaded {len(db.songs)} songs')
          # Test search functionality
          results = db.search('teemu', 3)
          print(f'✓ Search functionality works, found {len(results)} results')
          assert len(db.songs) > 0, 'No songs loaded'
          print('✓ All tests passed')
          "

  build:
    needs: [linting, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Github doesn't support cloning private submodules, so do it via SSH
      - name: Add SSH private keys for submodule repositories
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.READ_ONLY_DEPLOY_KEY }}

      # Clone submodules
      - name: Clone submodules
        run: git submodule update --init --recursive --remote

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
